---
import { fetchMenu, fetchMenuItems, slugBuilder, currentLocale, locales, timezones } from '../datocms.mjs'
import get from 'just-safe-get'
import Container from './Container.vue'
import ExternalLinkIcon from './icons/ExternalLinkIcon.vue'
import CityTime from './CityTime.vue'
import MobileMenu from './MobileMenu.vue'
import LocaleDropdown from './LocaleDropdown.vue'

const { locale } = Astro.props
const data = await fetchMenu(locale)
const menuItemData = await fetchMenuItems(locale)
const items = get(data, 'data.allMenuItems', [])
const allMenuItems = get(menuItemData, 'data.allMenuItems', [])
const { currentId } = Astro.props
const isActive = (item) => {
  return get(item, 'page.id') === currentId ||
    item.children?.some(c => get(c, 'page.id') === currentId)
}
const currentItem = allMenuItems.find(i => i?.page?.id === currentId)
const parentIndex = currentItem?.parent
  ? items.findIndex(i => i.id === currentItem.parent.id)
  : items.findIndex(i => i.id === currentItem?.id)
const children = currentItem?.parent
  ? items.find(i => i.id === currentItem.parent.id).children
  : (currentItem?.children || [])
const childOffset = 6 * parentIndex
const timezoneList = [
  'America/New_York',
  'Asia/Dubai',
  'Asia/Shanghai',
]
---

<nav id="top-nav" data-offset={children.length > 0 ? '100' : '50'} class="top-0 relative z-40 transition duration-200">
  <div class="shadow-md h-[50px] bg-white relative z-10">
    <Container class="flex justify-between h-full" padding={false}>
      <ul class="hidden lg:flex divide-x divide-gray-300 border-x border-gray-300">
        {items.map(item => (
          <li class="group flex relative w-24">
            <div class={`absolute transition-all w-full top-0 ${isActive(item) ? 'bg-black h-[10px]' : 'group-hover:bg-gray-300 h-0 group-hover:h-[10px]'}`}></div>
            <a
              class={`text-sm font-medium flex w-full items-center space-x-1.5 pl-4 rtl:pr-4 ${children.length > 0 && !isActive(item) ? 'text-gray-500 group-hover:text-black transition' : (item.inactive ? 'text-gray-500' : 'text-black')}`}
              href={item.inactive ? '#' : (item.externalUrl || slugBuilder(get(item, 'page.slug')))}
              target={item.externalUrl ? '_blank' : '_self'}
            >
              <span>{item.label}</span>
              {item.externalUrl && <ExternalLinkIcon class="h-3 w-3 text-gray-500" />}
            </a>
          </li>
        ))}
      </ul>
      <MobileMenu client:only items={items} currentId={currentId} />

      <div class="hidden lg:block">
        <ul class="flex items-center h-full text-gray-500 divide-x divide-gray-300 border-x border-gray-300">
          {timezoneList.map(tz => (
            <li class="flex h-full items-center px-4"><CityTime client:only timezone={tz} label={timezones[tz][currentLocale]} /></li>
          ))}
          <li class="flex h-full items-center px-4">
            <LocaleDropdown client:only locales={locales} currentLocale={currentLocale} />
          </li>
        </ul>
      </div>
      <div class="lg:hidden flex items-center px-4 text-gray-500">
        <LocaleDropdown client:only locales={locales} currentLocale={currentLocale} />
      </div>
    </Container>
  </div>

  {children.length > 0 &&
    <div class="hidden lg:block shadow-md h-[50px] bg-white relative z-[5]">
      <Container class="flex justify-between h-full" padding={false}>
        <ul class="flex h-full border-r border-gray-300" style={`margin-left: ${childOffset}rem`}>
          {children.map(item => (
            <li class="group flex ml-[1px] -mr-[1px] border-l border-gray-300 relative w-48">
              <div class={`absolute transition-all w-full top-0 ${isActive(item) ? 'bg-black h-[10px]' : 'group-hover:bg-gray-300 h-0 group-hover:h-[10px]'}`}></div>
              <a
                class={`text-sm font-medium whitespace-nowrap flex w-full items-center space-x-2 pl-4 rtl:pr-4 pr-8 rtl:pl-8 ${item.inactive ? 'text-gray-500' : 'text-black'}`}
                href={item.inactive ? '#' : (item.externalUrl || slugBuilder(get(item, 'page.slug')))}
              >
                <span>{item.label}</span>
                {item.externalUrl && <ExternalLinkIcon class="h-3 w-3 text-gray-500" />}
              </a>
            </li>
          ))}
        </ul>
      </Container>
    </div>
  }
</nav>