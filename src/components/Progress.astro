---
import Container from './Container.vue'
import LanguageSelector from './LanguageSelector.vue';
---

<div id="progress" class="fixed top-0 w-full flex bg-white h-[42px] transition-all ease-in-out shadow-md">
  <Container class="flex justify-between h-full">
    <div class="flex flex-1">
      <div class="flex h-full items-center border-t border-b-[5px] border-brand-primary">
        <img class="h-6 w-auto" src="/assets/lifeplus.svg" alt="LifePlus" />
      </div>
      <div class="flex-1 w-full">
        <div id="progress-bar" class="h-full border-t border-b-[5px] transition-[width] duration-150 ease-in-out border-brand-primary"></div>
      </div>
    </div>
    <div class="flex items-center ps-4 text-gray-500">
      <LanguageSelector />
    </div>
  </Container>
</div>

<script>
const masthead = document.getElementById('section-1')
const progress = document.getElementById('progress')
const progressBar = document.getElementById('progress-bar')
let rectangle = masthead.getBoundingClientRect()
const topOffset = rectangle.top + window.scrollY
const classes = ['-translate-y-full', 'opacity-0']

const setProgress = () => {
  const rectangle = masthead.getBoundingClientRect()
  let width = '0%'

  // Bar is visible
  if (rectangle.height + rectangle.top < 0) {
    progress.classList.remove(...classes)

    const offset = rectangle.height + topOffset
    const winScroll = (document.body.scrollTop || document.documentElement.scrollTop) - offset
    const height = (document.documentElement.scrollHeight - offset) - (document.documentElement.clientHeight)

    const scrolled = ((winScroll / height) * 100).toPrecision(5)

    width = `${scrolled}%`
  } else { // Bar is hidden
    progress.classList.add(...classes)
  }

  progressBar.style.width = width
}
const handleScroll = throttle(setProgress, 50, { leading: true, trailing: true })

handleScroll()
document.addEventListener('scroll', handleScroll)

function throttle (fn, interval, options) {
  var timeoutId = null;
  var throttledFn = null;
  var leading = (options && options.leading);
  var trailing = (options && options.trailing);

  if (leading == null) {
    leading = true; // default
  }

  if (trailing == null) {
    trailing = !leading; //default
  }

  if (leading == true) {
    trailing = false; // forced because there should be invocation per call
  }

  var cancel = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };

  var flush = function() {
    var call = throttledFn;
    cancel();

    if (call) {
      call();
    }
  };

  var throttleWrapper = function() {
    var callNow = leading && !timeoutId;
    var context = this;
    var args = arguments;

    throttledFn = function() {
      return fn.apply(context, args);
    };

    if (!timeoutId) {
      timeoutId = setTimeout(function() {
        timeoutId = null;

        if (trailing) {
          return throttledFn();
        }
      }, interval);
    }

    if (callNow) {
      callNow = false;
      return throttledFn();
    }
  };

  throttleWrapper.cancel = cancel;
  throttleWrapper.flush = flush;

  return throttleWrapper;
}
</script>